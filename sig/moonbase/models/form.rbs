module Moonbase
  module Models
    type form =
      {
        id: String,
        collection: Moonbase::Collection,
        links: Moonbase::Form::Links,
        name: String,
        type: :form,
        created_at: Time,
        pages_enabled: bool,
        pages_url: String,
        redirect_url: String,
        updated_at: Time
      }

    class Form < Moonbase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor collection: Moonbase::Collection

      attr_accessor links: Moonbase::Form::Links

      attr_accessor name: String

      attr_accessor type: :form

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader pages_enabled: bool?

      def pages_enabled=: (bool) -> bool

      attr_reader pages_url: String?

      def pages_url=: (String) -> String

      attr_reader redirect_url: String?

      def redirect_url=: (String) -> String

      attr_reader updated_at: Time?

      def updated_at=: (Time) -> Time

      def initialize: (
        id: String,
        collection: Moonbase::Collection,
        links: Moonbase::Form::Links,
        name: String,
        ?created_at: Time,
        ?pages_enabled: bool,
        ?pages_url: String,
        ?redirect_url: String,
        ?updated_at: Time,
        ?type: :form
      ) -> void

      def to_hash: -> {
        id: String,
        collection: Moonbase::Collection,
        links: Moonbase::Form::Links,
        name: String,
        type: :form,
        created_at: Time,
        pages_enabled: bool,
        pages_url: String,
        redirect_url: String,
        updated_at: Time
      }

      type links = { self_: String, collection: String }

      class Links < Moonbase::Internal::Type::BaseModel
        attr_accessor self_: String

        attr_reader collection: String?

        def collection=: (String) -> String

        def initialize: (self_: String, ?collection: String) -> void

        def to_hash: -> { self_: String, collection: String }
      end
    end
  end
end
