module Moonbase
  module Models
    type item =
      {
        id: String,
        type: :item,
        links: Moonbase::Item::Links,
        values: ::Hash[Symbol, Moonbase::Models::field_value?]
      }

    class Item < Moonbase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor type: :item

      attr_reader links: Moonbase::Item::Links?

      def links=: (Moonbase::Item::Links) -> Moonbase::Item::Links

      attr_reader values: ::Hash[Symbol, Moonbase::Models::field_value?]?

      def values=: (
        ::Hash[Symbol, Moonbase::Models::field_value?]
      ) -> ::Hash[Symbol, Moonbase::Models::field_value?]

      def initialize: (
        id: String,
        ?links: Moonbase::Item::Links,
        ?values: ::Hash[Symbol, Moonbase::Models::field_value?],
        ?type: :item
      ) -> void

      def to_hash: -> {
        id: String,
        type: :item,
        links: Moonbase::Item::Links,
        values: ::Hash[Symbol, Moonbase::Models::field_value?]
      }

      type links = { collection: String, self_: String }

      class Links < Moonbase::Internal::Type::BaseModel
        attr_reader collection: String?

        def collection=: (String) -> String

        attr_reader self_: String?

        def self_=: (String) -> String

        def initialize: (?collection: String, ?self_: String) -> void

        def to_hash: -> { collection: String, self_: String }
      end
    end
  end
end
