module Moonbase
  module Models
    type collection =
      {
        id: String,
        links: Moonbase::Collection::Links,
        name: String,
        ref: String,
        type: :collection,
        created_at: Time,
        description: String,
        fields: ::Array[Moonbase::Field],
        updated_at: Time,
        views: ::Array[Moonbase::View]
      }

    class Collection < Moonbase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor links: Moonbase::Collection::Links

      attr_accessor name: String

      attr_accessor ref: String

      attr_accessor type: :collection

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader description: String?

      def description=: (String) -> String

      attr_reader fields: ::Array[Moonbase::Field]?

      def fields=: (::Array[Moonbase::Field]) -> ::Array[Moonbase::Field]

      attr_reader updated_at: Time?

      def updated_at=: (Time) -> Time

      attr_reader views: ::Array[Moonbase::View]?

      def views=: (::Array[Moonbase::View]) -> ::Array[Moonbase::View]

      def initialize: (
        id: String,
        links: Moonbase::Collection::Links,
        name: String,
        ref: String,
        ?created_at: Time,
        ?description: String,
        ?fields: ::Array[Moonbase::Field],
        ?updated_at: Time,
        ?views: ::Array[Moonbase::View],
        ?type: :collection
      ) -> void

      def to_hash: -> {
        id: String,
        links: Moonbase::Collection::Links,
        name: String,
        ref: String,
        type: :collection,
        created_at: Time,
        description: String,
        fields: ::Array[Moonbase::Field],
        updated_at: Time,
        views: ::Array[Moonbase::View]
      }

      type links = { self_: String }

      class Links < Moonbase::Internal::Type::BaseModel
        attr_accessor self_: String

        def initialize: (self_: String) -> void

        def to_hash: -> { self_: String }
      end
    end
  end
end
