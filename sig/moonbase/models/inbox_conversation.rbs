module Moonbase
  module Models
    type inbox_conversation =
      {
        id: String,
        links: Moonbase::InboxConversation::Links,
        state: Moonbase::Models::InboxConversation::state,
        type: :inbox_conversation,
        addresses: ::Array[Moonbase::Address],
        bulk: bool,
        created_at: Time,
        follow_up: bool,
        new_draft_conversation: bool,
        spam: bool,
        subject: String,
        tags: ::Array[Moonbase::InboxConversation::Tag],
        timestamp: String,
        trash: bool,
        unread: bool,
        unsnooze_at: Time,
        updated_at: Time
      }

    class InboxConversation < Moonbase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor links: Moonbase::InboxConversation::Links

      attr_accessor state: Moonbase::Models::InboxConversation::state

      attr_accessor type: :inbox_conversation

      attr_reader addresses: ::Array[Moonbase::Address]?

      def addresses=: (::Array[Moonbase::Address]) -> ::Array[Moonbase::Address]

      attr_reader bulk: bool?

      def bulk=: (bool) -> bool

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader follow_up: bool?

      def follow_up=: (bool) -> bool

      attr_reader new_draft_conversation: bool?

      def new_draft_conversation=: (bool) -> bool

      attr_reader spam: bool?

      def spam=: (bool) -> bool

      attr_reader subject: String?

      def subject=: (String) -> String

      attr_reader tags: ::Array[Moonbase::InboxConversation::Tag]?

      def tags=: (
        ::Array[Moonbase::InboxConversation::Tag]
      ) -> ::Array[Moonbase::InboxConversation::Tag]

      attr_reader timestamp: String?

      def timestamp=: (String) -> String

      attr_reader trash: bool?

      def trash=: (bool) -> bool

      attr_reader unread: bool?

      def unread=: (bool) -> bool

      attr_reader unsnooze_at: Time?

      def unsnooze_at=: (Time) -> Time

      attr_reader updated_at: Time?

      def updated_at=: (Time) -> Time

      def initialize: (
        id: String,
        links: Moonbase::InboxConversation::Links,
        state: Moonbase::Models::InboxConversation::state,
        ?addresses: ::Array[Moonbase::Address],
        ?bulk: bool,
        ?created_at: Time,
        ?follow_up: bool,
        ?new_draft_conversation: bool,
        ?spam: bool,
        ?subject: String,
        ?tags: ::Array[Moonbase::InboxConversation::Tag],
        ?timestamp: String,
        ?trash: bool,
        ?unread: bool,
        ?unsnooze_at: Time,
        ?updated_at: Time,
        ?type: :inbox_conversation
      ) -> void

      def to_hash: -> {
        id: String,
        links: Moonbase::InboxConversation::Links,
        state: Moonbase::Models::InboxConversation::state,
        type: :inbox_conversation,
        addresses: ::Array[Moonbase::Address],
        bulk: bool,
        created_at: Time,
        follow_up: bool,
        new_draft_conversation: bool,
        spam: bool,
        subject: String,
        tags: ::Array[Moonbase::InboxConversation::Tag],
        timestamp: String,
        trash: bool,
        unread: bool,
        unsnooze_at: Time,
        updated_at: Time
      }

      type links = { inbox: String, messages: String, self_: String }

      class Links < Moonbase::Internal::Type::BaseModel
        attr_accessor inbox: String

        attr_accessor messages: String

        attr_accessor self_: String

        def initialize: (inbox: String, messages: String, self_: String) -> void

        def to_hash: -> { inbox: String, messages: String, self_: String }
      end

      type state = :unassigned | :active | :closed | :waiting

      module State
        extend Moonbase::Internal::Type::Enum

        UNASSIGNED: :unassigned
        ACTIVE: :active
        CLOSED: :closed
        WAITING: :waiting

        def self?.values: -> ::Array[Moonbase::Models::InboxConversation::state]
      end

      type tag = { id: String, name: String, type: :tag }

      class Tag < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor name: String

        attr_accessor type: :tag

        def initialize: (id: String, name: String, ?type: :tag) -> void

        def to_hash: -> { id: String, name: String, type: :tag }
      end
    end
  end
end
