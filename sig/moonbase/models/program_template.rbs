module Moonbase
  module Models
    type program_template =
      {
        id: String,
        body: String,
        links: Moonbase::ProgramTemplate::Links,
        subject: String,
        type: :program_template,
        created_at: Time,
        program: Moonbase::Program,
        updated_at: Time
      }

    class ProgramTemplate < Moonbase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor body: String

      attr_accessor links: Moonbase::ProgramTemplate::Links

      attr_accessor subject: String

      attr_accessor type: :program_template

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader program: Moonbase::Program?

      def program=: (Moonbase::Program) -> Moonbase::Program

      attr_reader updated_at: Time?

      def updated_at=: (Time) -> Time

      def initialize: (
        id: String,
        body: String,
        links: Moonbase::ProgramTemplate::Links,
        subject: String,
        ?created_at: Time,
        ?program: Moonbase::Program,
        ?updated_at: Time,
        ?type: :program_template
      ) -> void

      def to_hash: -> {
        id: String,
        body: String,
        links: Moonbase::ProgramTemplate::Links,
        subject: String,
        type: :program_template,
        created_at: Time,
        program: Moonbase::Program,
        updated_at: Time
      }

      type links = { self_: String, program: String }

      class Links < Moonbase::Internal::Type::BaseModel
        attr_accessor self_: String

        attr_reader program: String?

        def program=: (String) -> String

        def initialize: (self_: String, ?program: String) -> void

        def to_hash: -> { self_: String, program: String }
      end
    end
  end
end
