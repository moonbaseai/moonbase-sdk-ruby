module Moonbase
  module Models
    type meeting =
      {
        id: String,
        end_at: Time,
        i_cal_uid: String,
        links: Moonbase::Meeting::Links,
        provider_id: String,
        start_at: Time,
        time_zone: String,
        type: :meeting,
        attendees: ::Array[Moonbase::Attendee],
        created_at: Time,
        description: String,
        duration: Float,
        location: String,
        organizer: Moonbase::Organizer,
        provider_uri: String,
        summary_ante: String,
        summary_post: String,
        title: String,
        updated_at: Time
      }

    class Meeting < Moonbase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor end_at: Time

      attr_accessor i_cal_uid: String

      attr_accessor links: Moonbase::Meeting::Links

      attr_accessor provider_id: String

      attr_accessor start_at: Time

      attr_accessor time_zone: String

      attr_accessor type: :meeting

      attr_reader attendees: ::Array[Moonbase::Attendee]?

      def attendees=: (
        ::Array[Moonbase::Attendee]
      ) -> ::Array[Moonbase::Attendee]

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader description: String?

      def description=: (String) -> String

      attr_reader duration: Float?

      def duration=: (Float) -> Float

      attr_reader location: String?

      def location=: (String) -> String

      attr_reader organizer: Moonbase::Organizer?

      def organizer=: (Moonbase::Organizer) -> Moonbase::Organizer

      attr_reader provider_uri: String?

      def provider_uri=: (String) -> String

      attr_reader summary_ante: String?

      def summary_ante=: (String) -> String

      attr_reader summary_post: String?

      def summary_post=: (String) -> String

      attr_reader title: String?

      def title=: (String) -> String

      attr_reader updated_at: Time?

      def updated_at=: (Time) -> Time

      def initialize: (
        id: String,
        end_at: Time,
        i_cal_uid: String,
        links: Moonbase::Meeting::Links,
        provider_id: String,
        start_at: Time,
        time_zone: String,
        ?attendees: ::Array[Moonbase::Attendee],
        ?created_at: Time,
        ?description: String,
        ?duration: Float,
        ?location: String,
        ?organizer: Moonbase::Organizer,
        ?provider_uri: String,
        ?summary_ante: String,
        ?summary_post: String,
        ?title: String,
        ?updated_at: Time,
        ?type: :meeting
      ) -> void

      def to_hash: -> {
        id: String,
        end_at: Time,
        i_cal_uid: String,
        links: Moonbase::Meeting::Links,
        provider_id: String,
        start_at: Time,
        time_zone: String,
        type: :meeting,
        attendees: ::Array[Moonbase::Attendee],
        created_at: Time,
        description: String,
        duration: Float,
        location: String,
        organizer: Moonbase::Organizer,
        provider_uri: String,
        summary_ante: String,
        summary_post: String,
        title: String,
        updated_at: Time
      }

      type links =
        {
          self_: String,
          note: String,
          recording_url: String,
          summary: String,
          transcript_url: String
        }

      class Links < Moonbase::Internal::Type::BaseModel
        attr_accessor self_: String

        attr_reader note: String?

        def note=: (String) -> String

        attr_reader recording_url: String?

        def recording_url=: (String) -> String

        attr_reader summary: String?

        def summary=: (String) -> String

        attr_reader transcript_url: String?

        def transcript_url=: (String) -> String

        def initialize: (
          self_: String,
          ?note: String,
          ?recording_url: String,
          ?summary: String,
          ?transcript_url: String
        ) -> void

        def to_hash: -> {
          self_: String,
          note: String,
          recording_url: String,
          summary: String,
          transcript_url: String
        }
      end
    end
  end
end
