module Moonbase
  module Models
    type activity =
      Moonbase::Activity::ActivityCallOccurred
      | Moonbase::Activity::ActivityFormSubmitted
      | Moonbase::Activity::ActivityInboxMessageSent
      | Moonbase::Activity::ActivityItemCreated
      | Moonbase::Activity::ActivityItemMentioned
      | Moonbase::Activity::ActivityItemMerged
      | Moonbase::Activity::ActivityMeetingHeld
      | Moonbase::Activity::ActivityMeetingScheduled
      | Moonbase::Activity::ActivityNoteCreated
      | Moonbase::Activity::ActivityProgramMessageBounced
      | Moonbase::Activity::ActivityProgramMessageClicked
      | Moonbase::Activity::ActivityProgramMessageComplained
      | Moonbase::Activity::ActivityProgramMessageFailed
      | Moonbase::Activity::ActivityProgramMessageOpened
      | Moonbase::Activity::ActivityProgramMessageSent
      | Moonbase::Activity::ActivityProgramMessageShielded
      | Moonbase::Activity::ActivityProgramMessageUnsubscribed

    module Activity
      extend Moonbase::Internal::Type::Union

      type activity_call_occurred =
        {
          id: String,
          links: Moonbase::Activity::ActivityCallOccurred::Links,
          occurred_at: Time,
          type: :"activity/call_occurred",
          call: Moonbase::Activity::ActivityCallOccurred::Call
        }

      class ActivityCallOccurred < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityCallOccurred::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/call_occurred"

        attr_reader call: Moonbase::Activity::ActivityCallOccurred::Call?

        def call=: (
          Moonbase::Activity::ActivityCallOccurred::Call
        ) -> Moonbase::Activity::ActivityCallOccurred::Call

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityCallOccurred::Links,
          occurred_at: Time,
          ?call: Moonbase::Activity::ActivityCallOccurred::Call,
          ?type: :"activity/call_occurred"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityCallOccurred::Links,
          occurred_at: Time,
          type: :"activity/call_occurred",
          call: Moonbase::Activity::ActivityCallOccurred::Call
        }

        type links = { self_: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          def initialize: (self_: String) -> void

          def to_hash: -> { self_: String }
        end

        type call = { id: String, type: String }

        class Call < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_form_submitted =
        {
          id: String,
          links: Moonbase::Activity::ActivityFormSubmitted::Links,
          occurred_at: Time,
          type: :"activity/form_submitted",
          collection: Moonbase::Activity::ActivityFormSubmitted::Collection,
          related_item: Moonbase::Activity::ActivityFormSubmitted::RelatedItem
        }

      class ActivityFormSubmitted < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityFormSubmitted::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/form_submitted"

        attr_reader collection: Moonbase::Activity::ActivityFormSubmitted::Collection?

        def collection=: (
          Moonbase::Activity::ActivityFormSubmitted::Collection
        ) -> Moonbase::Activity::ActivityFormSubmitted::Collection

        attr_reader related_item: Moonbase::Activity::ActivityFormSubmitted::RelatedItem?

        def related_item=: (
          Moonbase::Activity::ActivityFormSubmitted::RelatedItem
        ) -> Moonbase::Activity::ActivityFormSubmitted::RelatedItem

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityFormSubmitted::Links,
          occurred_at: Time,
          ?collection: Moonbase::Activity::ActivityFormSubmitted::Collection,
          ?related_item: Moonbase::Activity::ActivityFormSubmitted::RelatedItem,
          ?type: :"activity/form_submitted"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityFormSubmitted::Links,
          occurred_at: Time,
          type: :"activity/form_submitted",
          collection: Moonbase::Activity::ActivityFormSubmitted::Collection,
          related_item: Moonbase::Activity::ActivityFormSubmitted::RelatedItem
        }

        type links = { self_: String, collection: String, item: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader collection: String?

          def collection=: (String) -> String

          attr_reader item: String?

          def item=: (String) -> String

          def initialize: (
            self_: String,
            ?collection: String,
            ?item: String
          ) -> void

          def to_hash: -> { self_: String, collection: String, item: String }
        end

        type collection = { id: String, type: String }

        class Collection < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type related_item = { id: String, type: String }

        class RelatedItem < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_inbox_message_sent =
        {
          id: String,
          links: Moonbase::Activity::ActivityInboxMessageSent::Links,
          occurred_at: Time,
          type: :"activity/inbox_message_sent",
          message: Moonbase::Activity::ActivityInboxMessageSent::Message
        }

      class ActivityInboxMessageSent < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityInboxMessageSent::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/inbox_message_sent"

        attr_reader message: Moonbase::Activity::ActivityInboxMessageSent::Message?

        def message=: (
          Moonbase::Activity::ActivityInboxMessageSent::Message
        ) -> Moonbase::Activity::ActivityInboxMessageSent::Message

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityInboxMessageSent::Links,
          occurred_at: Time,
          ?message: Moonbase::Activity::ActivityInboxMessageSent::Message,
          ?type: :"activity/inbox_message_sent"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityInboxMessageSent::Links,
          occurred_at: Time,
          type: :"activity/inbox_message_sent",
          message: Moonbase::Activity::ActivityInboxMessageSent::Message
        }

        type links = { self_: String, message: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader message: String?

          def message=: (String) -> String

          def initialize: (self_: String, ?message: String) -> void

          def to_hash: -> { self_: String, message: String }
        end

        type message = { id: String, type: String }

        class Message < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_item_created =
        {
          id: String,
          links: Moonbase::Activity::ActivityItemCreated::Links,
          occurred_at: Time,
          type: :"activity/item_created",
          collection: Moonbase::Activity::ActivityItemCreated::Collection,
          created_item: Moonbase::Activity::ActivityItemCreated::CreatedItem
        }

      class ActivityItemCreated < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityItemCreated::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/item_created"

        attr_reader collection: Moonbase::Activity::ActivityItemCreated::Collection?

        def collection=: (
          Moonbase::Activity::ActivityItemCreated::Collection
        ) -> Moonbase::Activity::ActivityItemCreated::Collection

        attr_reader created_item: Moonbase::Activity::ActivityItemCreated::CreatedItem?

        def created_item=: (
          Moonbase::Activity::ActivityItemCreated::CreatedItem
        ) -> Moonbase::Activity::ActivityItemCreated::CreatedItem

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityItemCreated::Links,
          occurred_at: Time,
          ?collection: Moonbase::Activity::ActivityItemCreated::Collection,
          ?created_item: Moonbase::Activity::ActivityItemCreated::CreatedItem,
          ?type: :"activity/item_created"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityItemCreated::Links,
          occurred_at: Time,
          type: :"activity/item_created",
          collection: Moonbase::Activity::ActivityItemCreated::Collection,
          created_item: Moonbase::Activity::ActivityItemCreated::CreatedItem
        }

        type links = { self_: String, collection: String, item: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader collection: String?

          def collection=: (String) -> String

          attr_reader item: String?

          def item=: (String) -> String

          def initialize: (
            self_: String,
            ?collection: String,
            ?item: String
          ) -> void

          def to_hash: -> { self_: String, collection: String, item: String }
        end

        type collection = { id: String, type: String }

        class Collection < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type created_item = { id: String, type: String }

        class CreatedItem < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_item_mentioned =
        {
          id: String,
          links: Moonbase::Activity::ActivityItemMentioned::Links,
          occurred_at: Time,
          type: :"activity/item_mentioned",
          author: Moonbase::Activity::ActivityItemMentioned::Author,
          mentioned_item: Moonbase::Activity::ActivityItemMentioned::MentionedItem,
          note: Moonbase::Activity::ActivityItemMentioned::Note
        }

      class ActivityItemMentioned < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityItemMentioned::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/item_mentioned"

        attr_reader author: Moonbase::Activity::ActivityItemMentioned::Author?

        def author=: (
          Moonbase::Activity::ActivityItemMentioned::Author
        ) -> Moonbase::Activity::ActivityItemMentioned::Author

        attr_reader mentioned_item: Moonbase::Activity::ActivityItemMentioned::MentionedItem?

        def mentioned_item=: (
          Moonbase::Activity::ActivityItemMentioned::MentionedItem
        ) -> Moonbase::Activity::ActivityItemMentioned::MentionedItem

        attr_reader note: Moonbase::Activity::ActivityItemMentioned::Note?

        def note=: (
          Moonbase::Activity::ActivityItemMentioned::Note
        ) -> Moonbase::Activity::ActivityItemMentioned::Note

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityItemMentioned::Links,
          occurred_at: Time,
          ?author: Moonbase::Activity::ActivityItemMentioned::Author,
          ?mentioned_item: Moonbase::Activity::ActivityItemMentioned::MentionedItem,
          ?note: Moonbase::Activity::ActivityItemMentioned::Note,
          ?type: :"activity/item_mentioned"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityItemMentioned::Links,
          occurred_at: Time,
          type: :"activity/item_mentioned",
          author: Moonbase::Activity::ActivityItemMentioned::Author,
          mentioned_item: Moonbase::Activity::ActivityItemMentioned::MentionedItem,
          note: Moonbase::Activity::ActivityItemMentioned::Note
        }

        type links =
          { self_: String, author: String, item: String, note: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader author: String?

          def author=: (String) -> String

          attr_reader item: String?

          def item=: (String) -> String

          attr_reader note: String?

          def note=: (String) -> String

          def initialize: (
            self_: String,
            ?author: String,
            ?item: String,
            ?note: String
          ) -> void

          def to_hash: -> {
            self_: String,
            author: String,
            item: String,
            note: String
          }
        end

        type author = { id: String, type: String }

        class Author < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type mentioned_item = { id: String, type: String }

        class MentionedItem < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type note = { id: String, type: String }

        class Note < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_item_merged =
        {
          id: String,
          links: Moonbase::Activity::ActivityItemMerged::Links,
          occurred_at: Time,
          type: :"activity/item_merged",
          destination: Moonbase::Activity::ActivityItemMerged::Destination,
          initiator: Moonbase::Activity::ActivityItemMerged::Initiator,
          source: Moonbase::Activity::ActivityItemMerged::Source
        }

      class ActivityItemMerged < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityItemMerged::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/item_merged"

        attr_reader destination: Moonbase::Activity::ActivityItemMerged::Destination?

        def destination=: (
          Moonbase::Activity::ActivityItemMerged::Destination
        ) -> Moonbase::Activity::ActivityItemMerged::Destination

        attr_reader initiator: Moonbase::Activity::ActivityItemMerged::Initiator?

        def initiator=: (
          Moonbase::Activity::ActivityItemMerged::Initiator
        ) -> Moonbase::Activity::ActivityItemMerged::Initiator

        attr_reader source: Moonbase::Activity::ActivityItemMerged::Source?

        def source=: (
          Moonbase::Activity::ActivityItemMerged::Source
        ) -> Moonbase::Activity::ActivityItemMerged::Source

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityItemMerged::Links,
          occurred_at: Time,
          ?destination: Moonbase::Activity::ActivityItemMerged::Destination,
          ?initiator: Moonbase::Activity::ActivityItemMerged::Initiator,
          ?source: Moonbase::Activity::ActivityItemMerged::Source,
          ?type: :"activity/item_merged"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityItemMerged::Links,
          occurred_at: Time,
          type: :"activity/item_merged",
          destination: Moonbase::Activity::ActivityItemMerged::Destination,
          initiator: Moonbase::Activity::ActivityItemMerged::Initiator,
          source: Moonbase::Activity::ActivityItemMerged::Source
        }

        type links = { self_: String, destination: String, initiator: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader destination: String?

          def destination=: (String) -> String

          attr_reader initiator: String?

          def initiator=: (String) -> String

          def initialize: (
            self_: String,
            ?destination: String,
            ?initiator: String
          ) -> void

          def to_hash: -> {
            self_: String,
            destination: String,
            initiator: String
          }
        end

        type destination = { id: String, type: String }

        class Destination < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type initiator = { id: String, type: String }

        class Initiator < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type source = { id: String, type: String }

        class Source < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_meeting_held =
        {
          id: String,
          links: Moonbase::Activity::ActivityMeetingHeld::Links,
          occurred_at: Time,
          type: :"activity/meeting_held",
          meeting: Moonbase::Activity::ActivityMeetingHeld::Meeting
        }

      class ActivityMeetingHeld < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityMeetingHeld::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/meeting_held"

        attr_reader meeting: Moonbase::Activity::ActivityMeetingHeld::Meeting?

        def meeting=: (
          Moonbase::Activity::ActivityMeetingHeld::Meeting
        ) -> Moonbase::Activity::ActivityMeetingHeld::Meeting

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityMeetingHeld::Links,
          occurred_at: Time,
          ?meeting: Moonbase::Activity::ActivityMeetingHeld::Meeting,
          ?type: :"activity/meeting_held"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityMeetingHeld::Links,
          occurred_at: Time,
          type: :"activity/meeting_held",
          meeting: Moonbase::Activity::ActivityMeetingHeld::Meeting
        }

        type links = { self_: String, meeting: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader meeting: String?

          def meeting=: (String) -> String

          def initialize: (self_: String, ?meeting: String) -> void

          def to_hash: -> { self_: String, meeting: String }
        end

        type meeting = { id: String, type: String }

        class Meeting < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_meeting_scheduled =
        {
          id: String,
          links: Moonbase::Activity::ActivityMeetingScheduled::Links,
          occurred_at: Time,
          type: :"activity/meeting_scheduled",
          meeting: Moonbase::Activity::ActivityMeetingScheduled::Meeting
        }

      class ActivityMeetingScheduled < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityMeetingScheduled::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/meeting_scheduled"

        attr_reader meeting: Moonbase::Activity::ActivityMeetingScheduled::Meeting?

        def meeting=: (
          Moonbase::Activity::ActivityMeetingScheduled::Meeting
        ) -> Moonbase::Activity::ActivityMeetingScheduled::Meeting

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityMeetingScheduled::Links,
          occurred_at: Time,
          ?meeting: Moonbase::Activity::ActivityMeetingScheduled::Meeting,
          ?type: :"activity/meeting_scheduled"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityMeetingScheduled::Links,
          occurred_at: Time,
          type: :"activity/meeting_scheduled",
          meeting: Moonbase::Activity::ActivityMeetingScheduled::Meeting
        }

        type links = { self_: String, meeting: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader meeting: String?

          def meeting=: (String) -> String

          def initialize: (self_: String, ?meeting: String) -> void

          def to_hash: -> { self_: String, meeting: String }
        end

        type meeting = { id: String, type: String }

        class Meeting < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_note_created =
        {
          id: String,
          links: Moonbase::Activity::ActivityNoteCreated::Links,
          occurred_at: Time,
          type: :"activity/note_created",
          note: Moonbase::Activity::ActivityNoteCreated::Note,
          related_item: Moonbase::Activity::ActivityNoteCreated::RelatedItem,
          related_meeting: Moonbase::Activity::ActivityNoteCreated::RelatedMeeting
        }

      class ActivityNoteCreated < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityNoteCreated::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/note_created"

        attr_reader note: Moonbase::Activity::ActivityNoteCreated::Note?

        def note=: (
          Moonbase::Activity::ActivityNoteCreated::Note
        ) -> Moonbase::Activity::ActivityNoteCreated::Note

        attr_reader related_item: Moonbase::Activity::ActivityNoteCreated::RelatedItem?

        def related_item=: (
          Moonbase::Activity::ActivityNoteCreated::RelatedItem
        ) -> Moonbase::Activity::ActivityNoteCreated::RelatedItem

        attr_reader related_meeting: Moonbase::Activity::ActivityNoteCreated::RelatedMeeting?

        def related_meeting=: (
          Moonbase::Activity::ActivityNoteCreated::RelatedMeeting
        ) -> Moonbase::Activity::ActivityNoteCreated::RelatedMeeting

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityNoteCreated::Links,
          occurred_at: Time,
          ?note: Moonbase::Activity::ActivityNoteCreated::Note,
          ?related_item: Moonbase::Activity::ActivityNoteCreated::RelatedItem,
          ?related_meeting: Moonbase::Activity::ActivityNoteCreated::RelatedMeeting,
          ?type: :"activity/note_created"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityNoteCreated::Links,
          occurred_at: Time,
          type: :"activity/note_created",
          note: Moonbase::Activity::ActivityNoteCreated::Note,
          related_item: Moonbase::Activity::ActivityNoteCreated::RelatedItem,
          related_meeting: Moonbase::Activity::ActivityNoteCreated::RelatedMeeting
        }

        type links =
          {
            self_: String,
            note: String,
            related_item: String,
            related_meeting: String
          }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader note: String?

          def note=: (String) -> String

          attr_reader related_item: String?

          def related_item=: (String) -> String

          attr_reader related_meeting: String?

          def related_meeting=: (String) -> String

          def initialize: (
            self_: String,
            ?note: String,
            ?related_item: String,
            ?related_meeting: String
          ) -> void

          def to_hash: -> {
            self_: String,
            note: String,
            related_item: String,
            related_meeting: String
          }
        end

        type note = { id: String, type: String }

        class Note < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type related_item = { id: String, type: String }

        class RelatedItem < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type related_meeting = { id: String, type: String }

        class RelatedMeeting < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_program_message_bounced =
        {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageBounced::Links,
          occurred_at: Time,
          type: :"activity/program_message_bounced",
          bounce_type: String,
          bounced_recipient_emails: ::Array[String],
          program_message: Moonbase::Activity::ActivityProgramMessageBounced::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageBounced::Recipient
        }

      class ActivityProgramMessageBounced < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityProgramMessageBounced::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_bounced"

        attr_reader bounce_type: String?

        def bounce_type=: (String) -> String

        attr_reader bounced_recipient_emails: ::Array[String]?

        def bounced_recipient_emails=: (::Array[String]) -> ::Array[String]

        attr_reader program_message: Moonbase::Activity::ActivityProgramMessageBounced::ProgramMessage?

        def program_message=: (
          Moonbase::Activity::ActivityProgramMessageBounced::ProgramMessage
        ) -> Moonbase::Activity::ActivityProgramMessageBounced::ProgramMessage

        attr_reader recipient: Moonbase::Activity::ActivityProgramMessageBounced::Recipient?

        def recipient=: (
          Moonbase::Activity::ActivityProgramMessageBounced::Recipient
        ) -> Moonbase::Activity::ActivityProgramMessageBounced::Recipient

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageBounced::Links,
          occurred_at: Time,
          ?bounce_type: String,
          ?bounced_recipient_emails: ::Array[String],
          ?program_message: Moonbase::Activity::ActivityProgramMessageBounced::ProgramMessage,
          ?recipient: Moonbase::Activity::ActivityProgramMessageBounced::Recipient,
          ?type: :"activity/program_message_bounced"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageBounced::Links,
          occurred_at: Time,
          type: :"activity/program_message_bounced",
          bounce_type: String,
          bounced_recipient_emails: ::Array[String],
          program_message: Moonbase::Activity::ActivityProgramMessageBounced::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageBounced::Recipient
        }

        type links = { self_: String, recipient: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader recipient: String?

          def recipient=: (String) -> String

          def initialize: (self_: String, ?recipient: String) -> void

          def to_hash: -> { self_: String, recipient: String }
        end

        type program_message = { id: String, type: String }

        class ProgramMessage < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type recipient = { id: String, type: String }

        class Recipient < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_program_message_clicked =
        {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageClicked::Links,
          occurred_at: Time,
          type: :"activity/program_message_clicked",
          link_text: String,
          link_url_unsafe: String,
          program_message: Moonbase::Activity::ActivityProgramMessageClicked::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageClicked::Recipient
        }

      class ActivityProgramMessageClicked < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityProgramMessageClicked::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_clicked"

        attr_reader link_text: String?

        def link_text=: (String) -> String

        attr_reader link_url_unsafe: String?

        def link_url_unsafe=: (String) -> String

        attr_reader program_message: Moonbase::Activity::ActivityProgramMessageClicked::ProgramMessage?

        def program_message=: (
          Moonbase::Activity::ActivityProgramMessageClicked::ProgramMessage
        ) -> Moonbase::Activity::ActivityProgramMessageClicked::ProgramMessage

        attr_reader recipient: Moonbase::Activity::ActivityProgramMessageClicked::Recipient?

        def recipient=: (
          Moonbase::Activity::ActivityProgramMessageClicked::Recipient
        ) -> Moonbase::Activity::ActivityProgramMessageClicked::Recipient

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageClicked::Links,
          occurred_at: Time,
          ?link_text: String,
          ?link_url_unsafe: String,
          ?program_message: Moonbase::Activity::ActivityProgramMessageClicked::ProgramMessage,
          ?recipient: Moonbase::Activity::ActivityProgramMessageClicked::Recipient,
          ?type: :"activity/program_message_clicked"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageClicked::Links,
          occurred_at: Time,
          type: :"activity/program_message_clicked",
          link_text: String,
          link_url_unsafe: String,
          program_message: Moonbase::Activity::ActivityProgramMessageClicked::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageClicked::Recipient
        }

        type links = { self_: String, recipient: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader recipient: String?

          def recipient=: (String) -> String

          def initialize: (self_: String, ?recipient: String) -> void

          def to_hash: -> { self_: String, recipient: String }
        end

        type program_message = { id: String, type: String }

        class ProgramMessage < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type recipient = { id: String, type: String }

        class Recipient < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_program_message_complained =
        {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageComplained::Links,
          occurred_at: Time,
          type: :"activity/program_message_complained",
          program_message: Moonbase::Activity::ActivityProgramMessageComplained::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageComplained::Recipient
        }

      class ActivityProgramMessageComplained < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityProgramMessageComplained::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_complained"

        attr_reader program_message: Moonbase::Activity::ActivityProgramMessageComplained::ProgramMessage?

        def program_message=: (
          Moonbase::Activity::ActivityProgramMessageComplained::ProgramMessage
        ) -> Moonbase::Activity::ActivityProgramMessageComplained::ProgramMessage

        attr_reader recipient: Moonbase::Activity::ActivityProgramMessageComplained::Recipient?

        def recipient=: (
          Moonbase::Activity::ActivityProgramMessageComplained::Recipient
        ) -> Moonbase::Activity::ActivityProgramMessageComplained::Recipient

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageComplained::Links,
          occurred_at: Time,
          ?program_message: Moonbase::Activity::ActivityProgramMessageComplained::ProgramMessage,
          ?recipient: Moonbase::Activity::ActivityProgramMessageComplained::Recipient,
          ?type: :"activity/program_message_complained"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageComplained::Links,
          occurred_at: Time,
          type: :"activity/program_message_complained",
          program_message: Moonbase::Activity::ActivityProgramMessageComplained::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageComplained::Recipient
        }

        type links = { self_: String, recipient: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader recipient: String?

          def recipient=: (String) -> String

          def initialize: (self_: String, ?recipient: String) -> void

          def to_hash: -> { self_: String, recipient: String }
        end

        type program_message = { id: String, type: String }

        class ProgramMessage < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type recipient = { id: String, type: String }

        class Recipient < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_program_message_failed =
        {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageFailed::Links,
          occurred_at: Time,
          type: :"activity/program_message_failed",
          program_message: Moonbase::Activity::ActivityProgramMessageFailed::ProgramMessage,
          reason_code: String,
          recipient: Moonbase::Activity::ActivityProgramMessageFailed::Recipient
        }

      class ActivityProgramMessageFailed < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityProgramMessageFailed::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_failed"

        attr_reader program_message: Moonbase::Activity::ActivityProgramMessageFailed::ProgramMessage?

        def program_message=: (
          Moonbase::Activity::ActivityProgramMessageFailed::ProgramMessage
        ) -> Moonbase::Activity::ActivityProgramMessageFailed::ProgramMessage

        attr_reader reason_code: String?

        def reason_code=: (String) -> String

        attr_reader recipient: Moonbase::Activity::ActivityProgramMessageFailed::Recipient?

        def recipient=: (
          Moonbase::Activity::ActivityProgramMessageFailed::Recipient
        ) -> Moonbase::Activity::ActivityProgramMessageFailed::Recipient

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageFailed::Links,
          occurred_at: Time,
          ?program_message: Moonbase::Activity::ActivityProgramMessageFailed::ProgramMessage,
          ?reason_code: String,
          ?recipient: Moonbase::Activity::ActivityProgramMessageFailed::Recipient,
          ?type: :"activity/program_message_failed"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageFailed::Links,
          occurred_at: Time,
          type: :"activity/program_message_failed",
          program_message: Moonbase::Activity::ActivityProgramMessageFailed::ProgramMessage,
          reason_code: String,
          recipient: Moonbase::Activity::ActivityProgramMessageFailed::Recipient
        }

        type links = { self_: String, recipient: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader recipient: String?

          def recipient=: (String) -> String

          def initialize: (self_: String, ?recipient: String) -> void

          def to_hash: -> { self_: String, recipient: String }
        end

        type program_message = { id: String, type: String }

        class ProgramMessage < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type recipient = { id: String, type: String }

        class Recipient < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_program_message_opened =
        {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageOpened::Links,
          occurred_at: Time,
          type: :"activity/program_message_opened",
          program_message: Moonbase::Activity::ActivityProgramMessageOpened::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageOpened::Recipient
        }

      class ActivityProgramMessageOpened < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityProgramMessageOpened::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_opened"

        attr_reader program_message: Moonbase::Activity::ActivityProgramMessageOpened::ProgramMessage?

        def program_message=: (
          Moonbase::Activity::ActivityProgramMessageOpened::ProgramMessage
        ) -> Moonbase::Activity::ActivityProgramMessageOpened::ProgramMessage

        attr_reader recipient: Moonbase::Activity::ActivityProgramMessageOpened::Recipient?

        def recipient=: (
          Moonbase::Activity::ActivityProgramMessageOpened::Recipient
        ) -> Moonbase::Activity::ActivityProgramMessageOpened::Recipient

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageOpened::Links,
          occurred_at: Time,
          ?program_message: Moonbase::Activity::ActivityProgramMessageOpened::ProgramMessage,
          ?recipient: Moonbase::Activity::ActivityProgramMessageOpened::Recipient,
          ?type: :"activity/program_message_opened"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageOpened::Links,
          occurred_at: Time,
          type: :"activity/program_message_opened",
          program_message: Moonbase::Activity::ActivityProgramMessageOpened::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageOpened::Recipient
        }

        type links = { self_: String, recipient: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader recipient: String?

          def recipient=: (String) -> String

          def initialize: (self_: String, ?recipient: String) -> void

          def to_hash: -> { self_: String, recipient: String }
        end

        type program_message = { id: String, type: String }

        class ProgramMessage < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type recipient = { id: String, type: String }

        class Recipient < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_program_message_sent =
        {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageSent::Links,
          occurred_at: Time,
          type: :"activity/program_message_sent",
          program_message: Moonbase::Activity::ActivityProgramMessageSent::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageSent::Recipient,
          recipient_emails: ::Array[String]
        }

      class ActivityProgramMessageSent < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityProgramMessageSent::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_sent"

        attr_reader program_message: Moonbase::Activity::ActivityProgramMessageSent::ProgramMessage?

        def program_message=: (
          Moonbase::Activity::ActivityProgramMessageSent::ProgramMessage
        ) -> Moonbase::Activity::ActivityProgramMessageSent::ProgramMessage

        attr_reader recipient: Moonbase::Activity::ActivityProgramMessageSent::Recipient?

        def recipient=: (
          Moonbase::Activity::ActivityProgramMessageSent::Recipient
        ) -> Moonbase::Activity::ActivityProgramMessageSent::Recipient

        attr_reader recipient_emails: ::Array[String]?

        def recipient_emails=: (::Array[String]) -> ::Array[String]

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageSent::Links,
          occurred_at: Time,
          ?program_message: Moonbase::Activity::ActivityProgramMessageSent::ProgramMessage,
          ?recipient: Moonbase::Activity::ActivityProgramMessageSent::Recipient,
          ?recipient_emails: ::Array[String],
          ?type: :"activity/program_message_sent"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageSent::Links,
          occurred_at: Time,
          type: :"activity/program_message_sent",
          program_message: Moonbase::Activity::ActivityProgramMessageSent::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageSent::Recipient,
          recipient_emails: ::Array[String]
        }

        type links = { self_: String, recipient: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader recipient: String?

          def recipient=: (String) -> String

          def initialize: (self_: String, ?recipient: String) -> void

          def to_hash: -> { self_: String, recipient: String }
        end

        type program_message = { id: String, type: String }

        class ProgramMessage < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type recipient = { id: String, type: String }

        class Recipient < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_program_message_shielded =
        {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageShielded::Links,
          occurred_at: Time,
          type: :"activity/program_message_shielded",
          program_message: Moonbase::Activity::ActivityProgramMessageShielded::ProgramMessage,
          reason_code: String,
          recipient: Moonbase::Activity::ActivityProgramMessageShielded::Recipient
        }

      class ActivityProgramMessageShielded < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityProgramMessageShielded::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_shielded"

        attr_reader program_message: Moonbase::Activity::ActivityProgramMessageShielded::ProgramMessage?

        def program_message=: (
          Moonbase::Activity::ActivityProgramMessageShielded::ProgramMessage
        ) -> Moonbase::Activity::ActivityProgramMessageShielded::ProgramMessage

        attr_reader reason_code: String?

        def reason_code=: (String) -> String

        attr_reader recipient: Moonbase::Activity::ActivityProgramMessageShielded::Recipient?

        def recipient=: (
          Moonbase::Activity::ActivityProgramMessageShielded::Recipient
        ) -> Moonbase::Activity::ActivityProgramMessageShielded::Recipient

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageShielded::Links,
          occurred_at: Time,
          ?program_message: Moonbase::Activity::ActivityProgramMessageShielded::ProgramMessage,
          ?reason_code: String,
          ?recipient: Moonbase::Activity::ActivityProgramMessageShielded::Recipient,
          ?type: :"activity/program_message_shielded"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageShielded::Links,
          occurred_at: Time,
          type: :"activity/program_message_shielded",
          program_message: Moonbase::Activity::ActivityProgramMessageShielded::ProgramMessage,
          reason_code: String,
          recipient: Moonbase::Activity::ActivityProgramMessageShielded::Recipient
        }

        type links = { self_: String, recipient: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader recipient: String?

          def recipient=: (String) -> String

          def initialize: (self_: String, ?recipient: String) -> void

          def to_hash: -> { self_: String, recipient: String }
        end

        type program_message = { id: String, type: String }

        class ProgramMessage < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type recipient = { id: String, type: String }

        class Recipient < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      type activity_program_message_unsubscribed =
        {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageUnsubscribed::Links,
          occurred_at: Time,
          type: :"activity/program_message_unsubscribed",
          email: String,
          program_message: Moonbase::Activity::ActivityProgramMessageUnsubscribed::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageUnsubscribed::Recipient
        }

      class ActivityProgramMessageUnsubscribed < Moonbase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: Moonbase::Activity::ActivityProgramMessageUnsubscribed::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_unsubscribed"

        attr_reader email: String?

        def email=: (String) -> String

        attr_reader program_message: Moonbase::Activity::ActivityProgramMessageUnsubscribed::ProgramMessage?

        def program_message=: (
          Moonbase::Activity::ActivityProgramMessageUnsubscribed::ProgramMessage
        ) -> Moonbase::Activity::ActivityProgramMessageUnsubscribed::ProgramMessage

        attr_reader recipient: Moonbase::Activity::ActivityProgramMessageUnsubscribed::Recipient?

        def recipient=: (
          Moonbase::Activity::ActivityProgramMessageUnsubscribed::Recipient
        ) -> Moonbase::Activity::ActivityProgramMessageUnsubscribed::Recipient

        def initialize: (
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageUnsubscribed::Links,
          occurred_at: Time,
          ?email: String,
          ?program_message: Moonbase::Activity::ActivityProgramMessageUnsubscribed::ProgramMessage,
          ?recipient: Moonbase::Activity::ActivityProgramMessageUnsubscribed::Recipient,
          ?type: :"activity/program_message_unsubscribed"
        ) -> void

        def to_hash: -> {
          id: String,
          links: Moonbase::Activity::ActivityProgramMessageUnsubscribed::Links,
          occurred_at: Time,
          type: :"activity/program_message_unsubscribed",
          email: String,
          program_message: Moonbase::Activity::ActivityProgramMessageUnsubscribed::ProgramMessage,
          recipient: Moonbase::Activity::ActivityProgramMessageUnsubscribed::Recipient
        }

        type links = { self_: String, recipient: String }

        class Links < Moonbase::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader recipient: String?

          def recipient=: (String) -> String

          def initialize: (self_: String, ?recipient: String) -> void

          def to_hash: -> { self_: String, recipient: String }
        end

        type program_message = { id: String, type: String }

        class ProgramMessage < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end

        type recipient = { id: String, type: String }

        class Recipient < Moonbase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: String

          def initialize: (id: String, type: String) -> void

          def to_hash: -> { id: String, type: String }
        end
      end

      def self?.variants: -> ::Array[Moonbase::Models::activity]
    end
  end
end
