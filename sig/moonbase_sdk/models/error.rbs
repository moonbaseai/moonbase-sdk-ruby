module MoonbaseSDK
  module Models
    type error =
      {
        type: :error,
        id: String,
        code: String,
        detail: String,
        source: MoonbaseSDK::Error::Source,
        status: String,
        title: String
      }

    class Error < MoonbaseSDK::Internal::Type::BaseModel
      attr_accessor type: :error

      attr_reader id: String?

      def id=: (String) -> String

      attr_reader code: String?

      def code=: (String) -> String

      attr_reader detail: String?

      def detail=: (String) -> String

      attr_reader source: MoonbaseSDK::Error::Source?

      def source=: (MoonbaseSDK::Error::Source) -> MoonbaseSDK::Error::Source

      attr_reader status: String?

      def status=: (String) -> String

      attr_reader title: String?

      def title=: (String) -> String

      def initialize: (
        ?id: String,
        ?code: String,
        ?detail: String,
        ?source: MoonbaseSDK::Error::Source,
        ?status: String,
        ?title: String,
        ?type: :error
      ) -> void

      def to_hash: -> {
        type: :error,
        id: String,
        code: String,
        detail: String,
        source: MoonbaseSDK::Error::Source,
        status: String,
        title: String
      }

      type source = { parameter: String, pointer: String }

      class Source < MoonbaseSDK::Internal::Type::BaseModel
        attr_reader parameter: String?

        def parameter=: (String) -> String

        attr_reader pointer: String?

        def pointer=: (String) -> String

        def initialize: (?parameter: String, ?pointer: String) -> void

        def to_hash: -> { parameter: String, pointer: String }
      end
    end
  end
end
