module MoonbaseSDK
  module Models
    type note =
      {
        id: String,
        links: MoonbaseSDK::Note::Links,
        type: :note,
        body: String,
        created_at: Time,
        summary: String,
        title: String,
        updated_at: Time
      }

    class Note < MoonbaseSDK::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor links: MoonbaseSDK::Note::Links

      attr_accessor type: :note

      attr_reader body: String?

      def body=: (String) -> String

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader summary: String?

      def summary=: (String) -> String

      attr_reader title: String?

      def title=: (String) -> String

      attr_reader updated_at: Time?

      def updated_at=: (Time) -> Time

      def initialize: (
        id: String,
        links: MoonbaseSDK::Note::Links,
        ?body: String,
        ?created_at: Time,
        ?summary: String,
        ?title: String,
        ?updated_at: Time,
        ?type: :note
      ) -> void

      def to_hash: -> {
        id: String,
        links: MoonbaseSDK::Note::Links,
        type: :note,
        body: String,
        created_at: Time,
        summary: String,
        title: String,
        updated_at: Time
      }

      type links = { self_: String }

      class Links < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor self_: String

        def initialize: (self_: String) -> void

        def to_hash: -> { self_: String }
      end
    end
  end
end
