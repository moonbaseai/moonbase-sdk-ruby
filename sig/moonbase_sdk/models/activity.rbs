module MoonbaseSDK
  module Models
    type activity =
      MoonbaseSDK::Activity::ActivityCallOccurred
      | MoonbaseSDK::Activity::ActivityFormSubmitted
      | MoonbaseSDK::Activity::ActivityInboxMessageSent
      | MoonbaseSDK::Activity::ActivityItemCreated
      | MoonbaseSDK::Activity::ActivityItemMentioned
      | MoonbaseSDK::Activity::ActivityMeetingHeld
      | MoonbaseSDK::Activity::ActivityMeetingScheduled
      | MoonbaseSDK::Activity::ActivityNoteCreated
      | MoonbaseSDK::Activity::ActivityProgramMessageBounced
      | MoonbaseSDK::Activity::ActivityProgramMessageClicked
      | MoonbaseSDK::Activity::ActivityProgramMessageComplained
      | MoonbaseSDK::Activity::ActivityProgramMessageFailed
      | MoonbaseSDK::Activity::ActivityProgramMessageOpened
      | MoonbaseSDK::Activity::ActivityProgramMessageSent
      | MoonbaseSDK::Activity::ActivityProgramMessageShielded
      | MoonbaseSDK::Activity::ActivityProgramMessageUnsubscribed

    module Activity
      extend MoonbaseSDK::Internal::Type::Union

      type activity_call_occurred =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityCallOccurred::Links,
          occurred_at: Time,
          type: :"activity/call_occurred",
          call: MoonbaseSDK::Call
        }

      class ActivityCallOccurred < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityCallOccurred::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/call_occurred"

        attr_reader call: MoonbaseSDK::Call?

        def call=: (MoonbaseSDK::Call) -> MoonbaseSDK::Call

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityCallOccurred::Links,
          occurred_at: Time,
          ?call: MoonbaseSDK::Call,
          ?type: :"activity/call_occurred"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityCallOccurred::Links,
          occurred_at: Time,
          type: :"activity/call_occurred",
          call: MoonbaseSDK::Call
        }

        type links = { self_: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          def initialize: (self_: String) -> void

          def to_hash: -> { self_: String }
        end
      end

      type activity_form_submitted =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityFormSubmitted::Links,
          occurred_at: Time,
          type: :"activity/form_submitted",
          collection: MoonbaseSDK::Collection,
          item: MoonbaseSDK::Item
        }

      class ActivityFormSubmitted < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityFormSubmitted::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/form_submitted"

        attr_reader collection: MoonbaseSDK::Collection?

        def collection=: (MoonbaseSDK::Collection) -> MoonbaseSDK::Collection

        attr_reader item: MoonbaseSDK::Item?

        def item=: (MoonbaseSDK::Item) -> MoonbaseSDK::Item

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityFormSubmitted::Links,
          occurred_at: Time,
          ?collection: MoonbaseSDK::Collection,
          ?item: MoonbaseSDK::Item,
          ?type: :"activity/form_submitted"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityFormSubmitted::Links,
          occurred_at: Time,
          type: :"activity/form_submitted",
          collection: MoonbaseSDK::Collection,
          item: MoonbaseSDK::Item
        }

        type links = { self_: String, collection: String, item: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader collection: String?

          def collection=: (String) -> String

          attr_reader item: String?

          def item=: (String) -> String

          def initialize: (
            self_: String,
            ?collection: String,
            ?item: String
          ) -> void

          def to_hash: -> { self_: String, collection: String, item: String }
        end
      end

      type activity_inbox_message_sent =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityInboxMessageSent::Links,
          occurred_at: Time,
          type: :"activity/inbox_message_sent",
          message: MoonbaseSDK::EmailMessage,
          recipients: ::Array[MoonbaseSDK::Address],
          sender: MoonbaseSDK::Address
        }

      class ActivityInboxMessageSent < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityInboxMessageSent::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/inbox_message_sent"

        attr_reader message: MoonbaseSDK::EmailMessage?

        def message=: (MoonbaseSDK::EmailMessage) -> MoonbaseSDK::EmailMessage

        attr_reader recipients: ::Array[MoonbaseSDK::Address]?

        def recipients=: (
          ::Array[MoonbaseSDK::Address]
        ) -> ::Array[MoonbaseSDK::Address]

        attr_reader sender: MoonbaseSDK::Address?

        def sender=: (MoonbaseSDK::Address) -> MoonbaseSDK::Address

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityInboxMessageSent::Links,
          occurred_at: Time,
          ?message: MoonbaseSDK::EmailMessage,
          ?recipients: ::Array[MoonbaseSDK::Address],
          ?sender: MoonbaseSDK::Address,
          ?type: :"activity/inbox_message_sent"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityInboxMessageSent::Links,
          occurred_at: Time,
          type: :"activity/inbox_message_sent",
          message: MoonbaseSDK::EmailMessage,
          recipients: ::Array[MoonbaseSDK::Address],
          sender: MoonbaseSDK::Address
        }

        type links = { self_: String, message: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader message: String?

          def message=: (String) -> String

          def initialize: (self_: String, ?message: String) -> void

          def to_hash: -> { self_: String, message: String }
        end
      end

      type activity_item_created =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityItemCreated::Links,
          occurred_at: Time,
          type: :"activity/item_created",
          collection: MoonbaseSDK::Collection,
          item: MoonbaseSDK::Item
        }

      class ActivityItemCreated < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityItemCreated::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/item_created"

        attr_reader collection: MoonbaseSDK::Collection?

        def collection=: (MoonbaseSDK::Collection) -> MoonbaseSDK::Collection

        attr_reader item: MoonbaseSDK::Item?

        def item=: (MoonbaseSDK::Item) -> MoonbaseSDK::Item

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityItemCreated::Links,
          occurred_at: Time,
          ?collection: MoonbaseSDK::Collection,
          ?item: MoonbaseSDK::Item,
          ?type: :"activity/item_created"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityItemCreated::Links,
          occurred_at: Time,
          type: :"activity/item_created",
          collection: MoonbaseSDK::Collection,
          item: MoonbaseSDK::Item
        }

        type links = { self_: String, collection: String, item: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader collection: String?

          def collection=: (String) -> String

          attr_reader item: String?

          def item=: (String) -> String

          def initialize: (
            self_: String,
            ?collection: String,
            ?item: String
          ) -> void

          def to_hash: -> { self_: String, collection: String, item: String }
        end
      end

      type activity_item_mentioned =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityItemMentioned::Links,
          occurred_at: Time,
          type: :"activity/item_mentioned",
          collection: MoonbaseSDK::Collection,
          item: MoonbaseSDK::Item
        }

      class ActivityItemMentioned < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityItemMentioned::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/item_mentioned"

        attr_reader collection: MoonbaseSDK::Collection?

        def collection=: (MoonbaseSDK::Collection) -> MoonbaseSDK::Collection

        attr_reader item: MoonbaseSDK::Item?

        def item=: (MoonbaseSDK::Item) -> MoonbaseSDK::Item

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityItemMentioned::Links,
          occurred_at: Time,
          ?collection: MoonbaseSDK::Collection,
          ?item: MoonbaseSDK::Item,
          ?type: :"activity/item_mentioned"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityItemMentioned::Links,
          occurred_at: Time,
          type: :"activity/item_mentioned",
          collection: MoonbaseSDK::Collection,
          item: MoonbaseSDK::Item
        }

        type links = { self_: String, collection: String, item: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader collection: String?

          def collection=: (String) -> String

          attr_reader item: String?

          def item=: (String) -> String

          def initialize: (
            self_: String,
            ?collection: String,
            ?item: String
          ) -> void

          def to_hash: -> { self_: String, collection: String, item: String }
        end
      end

      type activity_meeting_held =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityMeetingHeld::Links,
          occurred_at: Time,
          type: :"activity/meeting_held",
          attendees: ::Array[MoonbaseSDK::Attendee],
          meeting: MoonbaseSDK::Meeting
        }

      class ActivityMeetingHeld < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityMeetingHeld::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/meeting_held"

        attr_reader attendees: ::Array[MoonbaseSDK::Attendee]?

        def attendees=: (
          ::Array[MoonbaseSDK::Attendee]
        ) -> ::Array[MoonbaseSDK::Attendee]

        attr_reader meeting: MoonbaseSDK::Meeting?

        def meeting=: (MoonbaseSDK::Meeting) -> MoonbaseSDK::Meeting

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityMeetingHeld::Links,
          occurred_at: Time,
          ?attendees: ::Array[MoonbaseSDK::Attendee],
          ?meeting: MoonbaseSDK::Meeting,
          ?type: :"activity/meeting_held"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityMeetingHeld::Links,
          occurred_at: Time,
          type: :"activity/meeting_held",
          attendees: ::Array[MoonbaseSDK::Attendee],
          meeting: MoonbaseSDK::Meeting
        }

        type links = { self_: String, meeting: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader meeting: String?

          def meeting=: (String) -> String

          def initialize: (self_: String, ?meeting: String) -> void

          def to_hash: -> { self_: String, meeting: String }
        end
      end

      type activity_meeting_scheduled =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityMeetingScheduled::Links,
          occurred_at: Time,
          type: :"activity/meeting_scheduled",
          attendees: ::Array[MoonbaseSDK::Attendee],
          meeting: MoonbaseSDK::Meeting,
          organizer: MoonbaseSDK::Organizer
        }

      class ActivityMeetingScheduled < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityMeetingScheduled::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/meeting_scheduled"

        attr_reader attendees: ::Array[MoonbaseSDK::Attendee]?

        def attendees=: (
          ::Array[MoonbaseSDK::Attendee]
        ) -> ::Array[MoonbaseSDK::Attendee]

        attr_reader meeting: MoonbaseSDK::Meeting?

        def meeting=: (MoonbaseSDK::Meeting) -> MoonbaseSDK::Meeting

        attr_reader organizer: MoonbaseSDK::Organizer?

        def organizer=: (MoonbaseSDK::Organizer) -> MoonbaseSDK::Organizer

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityMeetingScheduled::Links,
          occurred_at: Time,
          ?attendees: ::Array[MoonbaseSDK::Attendee],
          ?meeting: MoonbaseSDK::Meeting,
          ?organizer: MoonbaseSDK::Organizer,
          ?type: :"activity/meeting_scheduled"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityMeetingScheduled::Links,
          occurred_at: Time,
          type: :"activity/meeting_scheduled",
          attendees: ::Array[MoonbaseSDK::Attendee],
          meeting: MoonbaseSDK::Meeting,
          organizer: MoonbaseSDK::Organizer
        }

        type links = { self_: String, meeting: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader meeting: String?

          def meeting=: (String) -> String

          def initialize: (self_: String, ?meeting: String) -> void

          def to_hash: -> { self_: String, meeting: String }
        end
      end

      type activity_note_created =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityNoteCreated::Links,
          occurred_at: Time,
          type: :"activity/note_created",
          note: MoonbaseSDK::Note,
          related_item: MoonbaseSDK::Item,
          related_meeting: MoonbaseSDK::Meeting
        }

      class ActivityNoteCreated < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityNoteCreated::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/note_created"

        attr_reader note: MoonbaseSDK::Note?

        def note=: (MoonbaseSDK::Note) -> MoonbaseSDK::Note

        attr_reader related_item: MoonbaseSDK::Item?

        def related_item=: (MoonbaseSDK::Item) -> MoonbaseSDK::Item

        attr_reader related_meeting: MoonbaseSDK::Meeting?

        def related_meeting=: (MoonbaseSDK::Meeting) -> MoonbaseSDK::Meeting

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityNoteCreated::Links,
          occurred_at: Time,
          ?note: MoonbaseSDK::Note,
          ?related_item: MoonbaseSDK::Item,
          ?related_meeting: MoonbaseSDK::Meeting,
          ?type: :"activity/note_created"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityNoteCreated::Links,
          occurred_at: Time,
          type: :"activity/note_created",
          note: MoonbaseSDK::Note,
          related_item: MoonbaseSDK::Item,
          related_meeting: MoonbaseSDK::Meeting
        }

        type links =
          {
            self_: String,
            note: String,
            related_item: String,
            related_meeting: String
          }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          attr_reader note: String?

          def note=: (String) -> String

          attr_reader related_item: String?

          def related_item=: (String) -> String

          attr_reader related_meeting: String?

          def related_meeting=: (String) -> String

          def initialize: (
            self_: String,
            ?note: String,
            ?related_item: String,
            ?related_meeting: String
          ) -> void

          def to_hash: -> {
            self_: String,
            note: String,
            related_item: String,
            related_meeting: String
          }
        end
      end

      type activity_program_message_bounced =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageBounced::Links,
          occurred_at: Time,
          type: :"activity/program_message_bounced",
          recipient: MoonbaseSDK::Address
        }

      class ActivityProgramMessageBounced < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityProgramMessageBounced::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_bounced"

        attr_reader recipient: MoonbaseSDK::Address?

        def recipient=: (MoonbaseSDK::Address) -> MoonbaseSDK::Address

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageBounced::Links,
          occurred_at: Time,
          ?recipient: MoonbaseSDK::Address,
          ?type: :"activity/program_message_bounced"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageBounced::Links,
          occurred_at: Time,
          type: :"activity/program_message_bounced",
          recipient: MoonbaseSDK::Address
        }

        type links = { self_: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          def initialize: (self_: String) -> void

          def to_hash: -> { self_: String }
        end
      end

      type activity_program_message_clicked =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageClicked::Links,
          occurred_at: Time,
          type: :"activity/program_message_clicked",
          link_text: String,
          link_url_unsafe: String,
          recipient: MoonbaseSDK::Address
        }

      class ActivityProgramMessageClicked < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityProgramMessageClicked::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_clicked"

        attr_reader link_text: String?

        def link_text=: (String) -> String

        attr_reader link_url_unsafe: String?

        def link_url_unsafe=: (String) -> String

        attr_reader recipient: MoonbaseSDK::Address?

        def recipient=: (MoonbaseSDK::Address) -> MoonbaseSDK::Address

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageClicked::Links,
          occurred_at: Time,
          ?link_text: String,
          ?link_url_unsafe: String,
          ?recipient: MoonbaseSDK::Address,
          ?type: :"activity/program_message_clicked"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageClicked::Links,
          occurred_at: Time,
          type: :"activity/program_message_clicked",
          link_text: String,
          link_url_unsafe: String,
          recipient: MoonbaseSDK::Address
        }

        type links = { self_: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          def initialize: (self_: String) -> void

          def to_hash: -> { self_: String }
        end
      end

      type activity_program_message_complained =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageComplained::Links,
          occurred_at: Time,
          type: :"activity/program_message_complained",
          recipient: MoonbaseSDK::Address
        }

      class ActivityProgramMessageComplained < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityProgramMessageComplained::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_complained"

        attr_reader recipient: MoonbaseSDK::Address?

        def recipient=: (MoonbaseSDK::Address) -> MoonbaseSDK::Address

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageComplained::Links,
          occurred_at: Time,
          ?recipient: MoonbaseSDK::Address,
          ?type: :"activity/program_message_complained"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageComplained::Links,
          occurred_at: Time,
          type: :"activity/program_message_complained",
          recipient: MoonbaseSDK::Address
        }

        type links = { self_: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          def initialize: (self_: String) -> void

          def to_hash: -> { self_: String }
        end
      end

      type activity_program_message_failed =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageFailed::Links,
          occurred_at: Time,
          type: :"activity/program_message_failed",
          recipient: MoonbaseSDK::Address
        }

      class ActivityProgramMessageFailed < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityProgramMessageFailed::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_failed"

        attr_reader recipient: MoonbaseSDK::Address?

        def recipient=: (MoonbaseSDK::Address) -> MoonbaseSDK::Address

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageFailed::Links,
          occurred_at: Time,
          ?recipient: MoonbaseSDK::Address,
          ?type: :"activity/program_message_failed"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageFailed::Links,
          occurred_at: Time,
          type: :"activity/program_message_failed",
          recipient: MoonbaseSDK::Address
        }

        type links = { self_: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          def initialize: (self_: String) -> void

          def to_hash: -> { self_: String }
        end
      end

      type activity_program_message_opened =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageOpened::Links,
          occurred_at: Time,
          type: :"activity/program_message_opened",
          recipient: MoonbaseSDK::Address
        }

      class ActivityProgramMessageOpened < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityProgramMessageOpened::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_opened"

        attr_reader recipient: MoonbaseSDK::Address?

        def recipient=: (MoonbaseSDK::Address) -> MoonbaseSDK::Address

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageOpened::Links,
          occurred_at: Time,
          ?recipient: MoonbaseSDK::Address,
          ?type: :"activity/program_message_opened"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageOpened::Links,
          occurred_at: Time,
          type: :"activity/program_message_opened",
          recipient: MoonbaseSDK::Address
        }

        type links = { self_: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          def initialize: (self_: String) -> void

          def to_hash: -> { self_: String }
        end
      end

      type activity_program_message_sent =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageSent::Links,
          occurred_at: Time,
          type: :"activity/program_message_sent",
          recipient: MoonbaseSDK::Address
        }

      class ActivityProgramMessageSent < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityProgramMessageSent::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_sent"

        attr_reader recipient: MoonbaseSDK::Address?

        def recipient=: (MoonbaseSDK::Address) -> MoonbaseSDK::Address

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageSent::Links,
          occurred_at: Time,
          ?recipient: MoonbaseSDK::Address,
          ?type: :"activity/program_message_sent"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageSent::Links,
          occurred_at: Time,
          type: :"activity/program_message_sent",
          recipient: MoonbaseSDK::Address
        }

        type links = { self_: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          def initialize: (self_: String) -> void

          def to_hash: -> { self_: String }
        end
      end

      type activity_program_message_shielded =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageShielded::Links,
          occurred_at: Time,
          type: :"activity/program_message_shielded",
          recipient: MoonbaseSDK::Address
        }

      class ActivityProgramMessageShielded < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityProgramMessageShielded::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_shielded"

        attr_reader recipient: MoonbaseSDK::Address?

        def recipient=: (MoonbaseSDK::Address) -> MoonbaseSDK::Address

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageShielded::Links,
          occurred_at: Time,
          ?recipient: MoonbaseSDK::Address,
          ?type: :"activity/program_message_shielded"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageShielded::Links,
          occurred_at: Time,
          type: :"activity/program_message_shielded",
          recipient: MoonbaseSDK::Address
        }

        type links = { self_: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          def initialize: (self_: String) -> void

          def to_hash: -> { self_: String }
        end
      end

      type activity_program_message_unsubscribed =
        {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageUnsubscribed::Links,
          occurred_at: Time,
          type: :"activity/program_message_unsubscribed",
          recipient: MoonbaseSDK::Address
        }

      class ActivityProgramMessageUnsubscribed < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor links: MoonbaseSDK::Activity::ActivityProgramMessageUnsubscribed::Links

        attr_accessor occurred_at: Time

        attr_accessor type: :"activity/program_message_unsubscribed"

        attr_reader recipient: MoonbaseSDK::Address?

        def recipient=: (MoonbaseSDK::Address) -> MoonbaseSDK::Address

        def initialize: (
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageUnsubscribed::Links,
          occurred_at: Time,
          ?recipient: MoonbaseSDK::Address,
          ?type: :"activity/program_message_unsubscribed"
        ) -> void

        def to_hash: -> {
          id: String,
          links: MoonbaseSDK::Activity::ActivityProgramMessageUnsubscribed::Links,
          occurred_at: Time,
          type: :"activity/program_message_unsubscribed",
          recipient: MoonbaseSDK::Address
        }

        type links = { self_: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor self_: String

          def initialize: (self_: String) -> void

          def to_hash: -> { self_: String }
        end
      end

      def self?.variants: -> ::Array[MoonbaseSDK::Models::activity]
    end
  end
end
