module MoonbaseSDK
  module Models
    type email_message =
      {
        id: String,
        links: MoonbaseSDK::EmailMessage::Links,
        :rfc822_message_id => String,
        subject: String,
        type: :email_message,
        addresses: ::Array[MoonbaseSDK::Address],
        attachments: ::Array[MoonbaseSDK::EmailMessage::Attachment],
        body_html: String,
        body_plain: String,
        bulk: bool,
        conversation: MoonbaseSDK::InboxConversation,
        created_at: Time,
        draft: bool,
        :in_reply_to_rfc822_message_id => String,
        spam: bool,
        summary: String,
        trash: bool,
        unread: bool
      }

    class EmailMessage < MoonbaseSDK::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor links: MoonbaseSDK::EmailMessage::Links

      attr_accessor rfc822_message_id: String

      attr_accessor subject: String

      attr_accessor type: :email_message

      attr_reader addresses: ::Array[MoonbaseSDK::Address]?

      def addresses=: (
        ::Array[MoonbaseSDK::Address]
      ) -> ::Array[MoonbaseSDK::Address]

      attr_reader attachments: ::Array[MoonbaseSDK::EmailMessage::Attachment]?

      def attachments=: (
        ::Array[MoonbaseSDK::EmailMessage::Attachment]
      ) -> ::Array[MoonbaseSDK::EmailMessage::Attachment]

      attr_reader body_html: String?

      def body_html=: (String) -> String

      attr_reader body_plain: String?

      def body_plain=: (String) -> String

      attr_reader bulk: bool?

      def bulk=: (bool) -> bool

      attr_reader conversation: MoonbaseSDK::InboxConversation?

      def conversation=: (
        MoonbaseSDK::InboxConversation
      ) -> MoonbaseSDK::InboxConversation

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader draft: bool?

      def draft=: (bool) -> bool

      attr_reader in_reply_to_rfc822_message_id: String?

      def in_reply_to_rfc822_message_id=: (String) -> String

      attr_reader spam: bool?

      def spam=: (bool) -> bool

      attr_reader summary: String?

      def summary=: (String) -> String

      attr_reader trash: bool?

      def trash=: (bool) -> bool

      attr_reader unread: bool?

      def unread=: (bool) -> bool

      def initialize: (
        id: String,
        links: MoonbaseSDK::EmailMessage::Links,
        rfc822_message_id: String,
        subject: String,
        ?addresses: ::Array[MoonbaseSDK::Address],
        ?attachments: ::Array[MoonbaseSDK::EmailMessage::Attachment],
        ?body_html: String,
        ?body_plain: String,
        ?bulk: bool,
        ?conversation: MoonbaseSDK::InboxConversation,
        ?created_at: Time,
        ?draft: bool,
        ?in_reply_to_rfc822_message_id: String,
        ?spam: bool,
        ?summary: String,
        ?trash: bool,
        ?unread: bool,
        ?type: :email_message
      ) -> void

      def to_hash: -> {
        id: String,
        links: MoonbaseSDK::EmailMessage::Links,
        :rfc822_message_id => String,
        subject: String,
        type: :email_message,
        addresses: ::Array[MoonbaseSDK::Address],
        attachments: ::Array[MoonbaseSDK::EmailMessage::Attachment],
        body_html: String,
        body_plain: String,
        bulk: bool,
        conversation: MoonbaseSDK::InboxConversation,
        created_at: Time,
        draft: bool,
        :in_reply_to_rfc822_message_id => String,
        spam: bool,
        summary: String,
        trash: bool,
        unread: bool
      }

      type links = { conversation: String, self_: String }

      class Links < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor conversation: String

        attr_accessor self_: String

        def initialize: (conversation: String, self_: String) -> void

        def to_hash: -> { conversation: String, self_: String }
      end

      type attachment =
        {
          id: String,
          filename: String,
          links: MoonbaseSDK::EmailMessage::Attachment::Links,
          size: Integer,
          type: :attachment,
          created_at: Time,
          updated_at: String
        }

      class Attachment < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor filename: String

        attr_accessor links: MoonbaseSDK::EmailMessage::Attachment::Links

        attr_accessor size: Integer

        attr_accessor type: :attachment

        attr_reader created_at: Time?

        def created_at=: (Time) -> Time

        attr_reader updated_at: String?

        def updated_at=: (String) -> String

        def initialize: (
          id: String,
          filename: String,
          links: MoonbaseSDK::EmailMessage::Attachment::Links,
          size: Integer,
          ?created_at: Time,
          ?updated_at: String,
          ?type: :attachment
        ) -> void

        def to_hash: -> {
          id: String,
          filename: String,
          links: MoonbaseSDK::EmailMessage::Attachment::Links,
          size: Integer,
          type: :attachment,
          created_at: Time,
          updated_at: String
        }

        type links =
          { conversation: String, download_url: String, message: String }

        class Links < MoonbaseSDK::Internal::Type::BaseModel
          attr_accessor conversation: String

          attr_accessor download_url: String

          attr_accessor message: String

          def initialize: (
            conversation: String,
            download_url: String,
            message: String
          ) -> void

          def to_hash: -> {
            conversation: String,
            download_url: String,
            message: String
          }
        end
      end
    end
  end
end
