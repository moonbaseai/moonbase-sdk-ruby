module MoonbaseSDK
  module Models
    type view =
      {
        id: String,
        links: MoonbaseSDK::View::Links,
        name: String,
        type: :view,
        collection: MoonbaseSDK::Collection,
        view_type: MoonbaseSDK::Models::View::view_type
      }

    class View < MoonbaseSDK::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor links: MoonbaseSDK::View::Links

      attr_accessor name: String

      attr_accessor type: :view

      attr_reader collection: MoonbaseSDK::Collection?

      def collection=: (MoonbaseSDK::Collection) -> MoonbaseSDK::Collection

      attr_reader view_type: MoonbaseSDK::Models::View::view_type?

      def view_type=: (
        MoonbaseSDK::Models::View::view_type
      ) -> MoonbaseSDK::Models::View::view_type

      def initialize: (
        id: String,
        links: MoonbaseSDK::View::Links,
        name: String,
        ?collection: MoonbaseSDK::Collection,
        ?view_type: MoonbaseSDK::Models::View::view_type,
        ?type: :view
      ) -> void

      def to_hash: -> {
        id: String,
        links: MoonbaseSDK::View::Links,
        name: String,
        type: :view,
        collection: MoonbaseSDK::Collection,
        view_type: MoonbaseSDK::Models::View::view_type
      }

      type links = { collection: String, items: String, self_: String }

      class Links < MoonbaseSDK::Internal::Type::BaseModel
        attr_accessor collection: String

        attr_accessor items: String

        attr_accessor self_: String

        def initialize: (
          collection: String,
          items: String,
          self_: String
        ) -> void

        def to_hash: -> { collection: String, items: String, self_: String }
      end

      type view_type = :table | :board

      module ViewType
        extend MoonbaseSDK::Internal::Type::Enum

        TABLE: :table
        BOARD: :board

        def self?.values: -> ::Array[MoonbaseSDK::Models::View::view_type]
      end
    end
  end
end
